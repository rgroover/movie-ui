/* tslint:disable */
/* eslint-disable */
/**
 * Your API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ActorCast
 */
export interface ActorCast {
    /**
     * 
     * @type {boolean}
     * @memberof ActorCast
     */
    'adult'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'backdropPath'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ActorCast
     */
    'genreIds'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof ActorCast
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'originalLanguage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'originalTitle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'overview'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ActorCast
     */
    'popularity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'posterPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'releaseDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'title'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ActorCast
     */
    'video'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof ActorCast
     */
    'voteAverage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ActorCast
     */
    'voteCount'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'character'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'creditId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ActorCast
     */
    'order'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'mediaType'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ActorCast
     */
    'originCountry'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'originalName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'firstAirDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ActorCast
     */
    'episodeCount'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'department'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorCast
     */
    'job'?: string | null;
}
/**
 * 
 * @export
 * @interface ActorDetails
 */
export interface ActorDetails {
    /**
     * 
     * @type {boolean}
     * @memberof ActorDetails
     */
    'adult'?: boolean | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ActorDetails
     */
    'alsoKnownAs'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ActorDetails
     */
    'biography'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorDetails
     */
    'birthday'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ActorDetails
     */
    'deathday'?: any | null;
    /**
     * 
     * @type {number}
     * @memberof ActorDetails
     */
    'gender'?: number | null;
    /**
     * 
     * @type {any}
     * @memberof ActorDetails
     */
    'homepage'?: any | null;
    /**
     * 
     * @type {number}
     * @memberof ActorDetails
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ActorDetails
     */
    'imdbId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorDetails
     */
    'knownForDepartment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorDetails
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorDetails
     */
    'placeOfBirth'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ActorDetails
     */
    'popularity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ActorDetails
     */
    'profilePath'?: string | null;
    /**
     * 
     * @type {CombinedCredits}
     * @memberof ActorDetails
     */
    'combinedCredits'?: CombinedCredits;
}
/**
 * 
 * @export
 * @interface ActorSearchResultRecord
 */
export interface ActorSearchResultRecord {
    /**
     * 
     * @type {boolean}
     * @memberof ActorSearchResultRecord
     */
    'adult'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ActorSearchResultRecord
     */
    'gender'?: number;
    /**
     * 
     * @type {number}
     * @memberof ActorSearchResultRecord
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ActorSearchResultRecord
     */
    'knownForDepartment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorSearchResultRecord
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActorSearchResultRecord
     */
    'originalName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ActorSearchResultRecord
     */
    'popularity'?: number;
    /**
     * 
     * @type {string}
     * @memberof ActorSearchResultRecord
     */
    'profilePath'?: string | null;
    /**
     * 
     * @type {Array<KnownFor>}
     * @memberof ActorSearchResultRecord
     */
    'knownFor'?: Array<KnownFor> | null;
}
/**
 * 
 * @export
 * @interface ActorSearchResults
 */
export interface ActorSearchResults {
    /**
     * 
     * @type {number}
     * @memberof ActorSearchResults
     */
    'page'?: number;
    /**
     * 
     * @type {Array<ActorSearchResultRecord>}
     * @memberof ActorSearchResults
     */
    'results'?: Array<ActorSearchResultRecord> | null;
    /**
     * 
     * @type {number}
     * @memberof ActorSearchResults
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof ActorSearchResults
     */
    'totalResults'?: number;
}
/**
 * 
 * @export
 * @interface Ad
 */
export interface Ad {
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'logoPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Ad
     */
    'providerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'providerName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Ad
     */
    'displayPriority'?: number;
}
/**
 * 
 * @export
 * @interface Buy
 */
export interface Buy {
    /**
     * 
     * @type {string}
     * @memberof Buy
     */
    'logoPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Buy
     */
    'providerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Buy
     */
    'providerName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Buy
     */
    'displayPriority'?: number;
}
/**
 * 
 * @export
 * @interface Cast
 */
export interface Cast {
    /**
     * 
     * @type {boolean}
     * @memberof Cast
     */
    'adult'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Cast
     */
    'gender'?: number;
    /**
     * 
     * @type {number}
     * @memberof Cast
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Cast
     */
    'knownForDepartment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Cast
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Cast
     */
    'originalName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Cast
     */
    'popularity'?: number;
    /**
     * 
     * @type {string}
     * @memberof Cast
     */
    'profilePath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Cast
     */
    'castId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Cast
     */
    'character'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Cast
     */
    'creditId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Cast
     */
    'order'?: number;
    /**
     * 
     * @type {Array<Role>}
     * @memberof Cast
     */
    'roles'?: Array<Role> | null;
}
/**
 * 
 * @export
 * @interface CastAndCrewModel
 */
export interface CastAndCrewModel {
    /**
     * 
     * @type {number}
     * @memberof CastAndCrewModel
     */
    'id'?: number;
    /**
     * 
     * @type {Array<Cast>}
     * @memberof CastAndCrewModel
     */
    'cast'?: Array<Cast> | null;
    /**
     * 
     * @type {Array<Crew>}
     * @memberof CastAndCrewModel
     */
    'crew'?: Array<Crew> | null;
}
/**
 * 
 * @export
 * @interface CombinedCredits
 */
export interface CombinedCredits {
    /**
     * 
     * @type {Array<ActorCast>}
     * @memberof CombinedCredits
     */
    'cast'?: Array<ActorCast> | null;
}
/**
 * 
 * @export
 * @interface CreatedBy
 */
export interface CreatedBy {
    /**
     * 
     * @type {number}
     * @memberof CreatedBy
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreatedBy
     */
    'creditId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatedBy
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatedBy
     */
    'originalName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreatedBy
     */
    'gender'?: number;
    /**
     * 
     * @type {any}
     * @memberof CreatedBy
     */
    'profilePath'?: any | null;
}
/**
 * 
 * @export
 * @interface Crew
 */
export interface Crew {
    /**
     * 
     * @type {boolean}
     * @memberof Crew
     */
    'adult'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Crew
     */
    'gender'?: number;
    /**
     * 
     * @type {number}
     * @memberof Crew
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Crew
     */
    'knownForDepartment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Crew
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Crew
     */
    'originalName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Crew
     */
    'popularity'?: number;
    /**
     * 
     * @type {string}
     * @memberof Crew
     */
    'profilePath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Crew
     */
    'creditId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Crew
     */
    'department'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Crew
     */
    'job'?: string | null;
}
/**
 * 
 * @export
 * @interface EpisodeSummary
 */
export interface EpisodeSummary {
    /**
     * 
     * @type {string}
     * @memberof EpisodeSummary
     */
    'airDate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EpisodeSummary
     */
    'episodeNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof EpisodeSummary
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EpisodeSummary
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EpisodeSummary
     */
    'stillPath'?: string | null;
}
/**
 * 
 * @export
 * @interface FavoriteModel
 */
export interface FavoriteModel {
    /**
     * 
     * @type {string}
     * @memberof FavoriteModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof FavoriteModel
     */
    'userEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FavoriteModel
     */
    'mediaId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FavoriteModel
     */
    'mediaTitle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FavoriteModel
     */
    'mediaImageUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FavoriteModel
     */
    'mediaType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FavoriteModel
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface Flatrate
 */
export interface Flatrate {
    /**
     * 
     * @type {string}
     * @memberof Flatrate
     */
    'logoPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Flatrate
     */
    'providerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Flatrate
     */
    'providerName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Flatrate
     */
    'displayPriority'?: number;
}
/**
 * 
 * @export
 * @interface Genre
 */
export interface Genre {
    /**
     * 
     * @type {number}
     * @memberof Genre
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Genre
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface GuestStar
 */
export interface GuestStar {
    /**
     * 
     * @type {string}
     * @memberof GuestStar
     */
    'character'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuestStar
     */
    'creditId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GuestStar
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GuestStar
     */
    'adult'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GuestStar
     */
    'gender'?: number;
    /**
     * 
     * @type {number}
     * @memberof GuestStar
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GuestStar
     */
    'knownForDepartment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuestStar
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuestStar
     */
    'originalName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GuestStar
     */
    'popularity'?: number;
    /**
     * 
     * @type {string}
     * @memberof GuestStar
     */
    'profilePath'?: string | null;
}
/**
 * 
 * @export
 * @interface KnownFor
 */
export interface KnownFor {
    /**
     * 
     * @type {string}
     * @memberof KnownFor
     */
    'backdropPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof KnownFor
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof KnownFor
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof KnownFor
     */
    'originalTitle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof KnownFor
     */
    'overview'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof KnownFor
     */
    'posterPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof KnownFor
     */
    'mediaType'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof KnownFor
     */
    'adult'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof KnownFor
     */
    'originalLanguage'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof KnownFor
     */
    'genreIds'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof KnownFor
     */
    'popularity'?: number;
    /**
     * 
     * @type {string}
     * @memberof KnownFor
     */
    'releaseDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof KnownFor
     */
    'video'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof KnownFor
     */
    'voteAverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof KnownFor
     */
    'voteCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof KnownFor
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof KnownFor
     */
    'originalName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof KnownFor
     */
    'firstAirDate'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof KnownFor
     */
    'originCountry'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface LastEpisodeToAir
 */
export interface LastEpisodeToAir {
    /**
     * 
     * @type {number}
     * @memberof LastEpisodeToAir
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LastEpisodeToAir
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LastEpisodeToAir
     */
    'overview'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LastEpisodeToAir
     */
    'voteAverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof LastEpisodeToAir
     */
    'voteCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof LastEpisodeToAir
     */
    'airDate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LastEpisodeToAir
     */
    'episodeNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof LastEpisodeToAir
     */
    'episodeType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LastEpisodeToAir
     */
    'productionCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LastEpisodeToAir
     */
    'runtime'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LastEpisodeToAir
     */
    'seasonNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof LastEpisodeToAir
     */
    'showId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LastEpisodeToAir
     */
    'stillPath'?: string | null;
}
/**
 * 
 * @export
 * @interface MovieDetails
 */
export interface MovieDetails {
    /**
     * 
     * @type {boolean}
     * @memberof MovieDetails
     */
    'adult'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails
     */
    'backdropPath'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof MovieDetails
     */
    'belongsToCollection'?: any | null;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails
     */
    'budget'?: number;
    /**
     * 
     * @type {Array<Genre>}
     * @memberof MovieDetails
     */
    'genres'?: Array<Genre> | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails
     */
    'homepage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails
     */
    'imdbId'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof MovieDetails
     */
    'originCountry'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails
     */
    'originalLanguage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails
     */
    'originalTitle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails
     */
    'overview'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails
     */
    'popularity'?: number;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails
     */
    'posterPath'?: string | null;
    /**
     * 
     * @type {Array<ProductionCompany>}
     * @memberof MovieDetails
     */
    'productionCompanies'?: Array<ProductionCompany> | null;
    /**
     * 
     * @type {Array<ProductionCountry>}
     * @memberof MovieDetails
     */
    'productionCountries'?: Array<ProductionCountry> | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails
     */
    'releaseDate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails
     */
    'revenue'?: number;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails
     */
    'runtime'?: number;
    /**
     * 
     * @type {Array<SpokenLanguage>}
     * @memberof MovieDetails
     */
    'spokenLanguages'?: Array<SpokenLanguage> | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails
     */
    'tagline'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MovieDetails
     */
    'video'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails
     */
    'voteAverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails
     */
    'voteCount'?: number;
}
/**
 * 
 * @export
 * @interface MovieModel
 */
export interface MovieModel {
    /**
     * 
     * @type {number}
     * @memberof MovieModel
     */
    'externalId'?: number;
    /**
     * 
     * @type {MovieDetails}
     * @memberof MovieModel
     */
    'movieDetails'?: MovieDetails;
    /**
     * 
     * @type {CastAndCrewModel}
     * @memberof MovieModel
     */
    'castAndCrew'?: CastAndCrewModel;
    /**
     * 
     * @type {WatchProviders}
     * @memberof MovieModel
     */
    'watchProviders'?: WatchProviders;
    /**
     * 
     * @type {VideoResults}
     * @memberof MovieModel
     */
    'videos'?: VideoResults;
}
/**
 * 
 * @export
 * @interface MovieSearchResult
 */
export interface MovieSearchResult {
    /**
     * 
     * @type {boolean}
     * @memberof MovieSearchResult
     */
    'adult'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MovieSearchResult
     */
    'backdropPath'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof MovieSearchResult
     */
    'genreIds'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof MovieSearchResult
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MovieSearchResult
     */
    'originalLanguage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieSearchResult
     */
    'originalTitle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieSearchResult
     */
    'overview'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MovieSearchResult
     */
    'popularity'?: number;
    /**
     * 
     * @type {string}
     * @memberof MovieSearchResult
     */
    'posterPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieSearchResult
     */
    'releaseDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieSearchResult
     */
    'title'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MovieSearchResult
     */
    'video'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MovieSearchResult
     */
    'voteAverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof MovieSearchResult
     */
    'voteCount'?: number;
}
/**
 * 
 * @export
 * @interface MultiSearchPagedResults
 */
export interface MultiSearchPagedResults {
    /**
     * 
     * @type {number}
     * @memberof MultiSearchPagedResults
     */
    'page'?: number;
    /**
     * 
     * @type {Array<MultiSearchResult>}
     * @memberof MultiSearchPagedResults
     */
    'results'?: Array<MultiSearchResult> | null;
    /**
     * 
     * @type {number}
     * @memberof MultiSearchPagedResults
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultiSearchPagedResults
     */
    'totalResults'?: number;
}
/**
 * 
 * @export
 * @interface MultiSearchResult
 */
export interface MultiSearchResult {
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'backdropPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MultiSearchResult
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'originalName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'overview'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'posterPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'mediaType'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MultiSearchResult
     */
    'adult'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'originalLanguage'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof MultiSearchResult
     */
    'genreIds'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof MultiSearchResult
     */
    'popularity'?: number;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'firstAirDate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MultiSearchResult
     */
    'voteAverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultiSearchResult
     */
    'voteCount'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof MultiSearchResult
     */
    'originCountry'?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof MultiSearchResult
     */
    'gender'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'knownForDepartment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'profilePath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'originalTitle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultiSearchResult
     */
    'releaseDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MultiSearchResult
     */
    'video'?: boolean | null;
}
/**
 * 
 * @export
 * @interface Network
 */
export interface Network {
    /**
     * 
     * @type {number}
     * @memberof Network
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    'logoPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    'originCountry'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductionCompany
 */
export interface ProductionCompany {
    /**
     * 
     * @type {number}
     * @memberof ProductionCompany
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductionCompany
     */
    'logoPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductionCompany
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductionCompany
     */
    'originCountry'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductionCountry
 */
export interface ProductionCountry {
    /**
     * 
     * @type {string}
     * @memberof ProductionCountry
     */
    'iso31661'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductionCountry
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface Rent
 */
export interface Rent {
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'logoPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Rent
     */
    'providerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'providerName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Rent
     */
    'displayPriority'?: number;
}
/**
 * 
 * @export
 * @interface Results
 */
export interface Results {
    /**
     * 
     * @type {US}
     * @memberof Results
     */
    'us'?: US;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'creditId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'character'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    'episodeCount'?: number;
}
/**
 * 
 * @export
 * @interface SearchResultsPagedModel
 */
export interface SearchResultsPagedModel {
    /**
     * 
     * @type {number}
     * @memberof SearchResultsPagedModel
     */
    'page'?: number;
    /**
     * 
     * @type {Array<MovieSearchResult>}
     * @memberof SearchResultsPagedModel
     */
    'searchResults'?: Array<MovieSearchResult> | null;
    /**
     * 
     * @type {number}
     * @memberof SearchResultsPagedModel
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchResultsPagedModel
     */
    'totalResults'?: number;
}
/**
 * 
 * @export
 * @interface Season
 */
export interface Season {
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'airDate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    'episodeCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'overview'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'posterPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    'seasonNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    'voteAverage'?: number;
}
/**
 * 
 * @export
 * @interface SpokenLanguage
 */
export interface SpokenLanguage {
    /**
     * 
     * @type {string}
     * @memberof SpokenLanguage
     */
    'englishName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpokenLanguage
     */
    'iso6391'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpokenLanguage
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface TVShowSearchResultRecord
 */
export interface TVShowSearchResultRecord {
    /**
     * 
     * @type {boolean}
     * @memberof TVShowSearchResultRecord
     */
    'adult'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TVShowSearchResultRecord
     */
    'backdropPath'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof TVShowSearchResultRecord
     */
    'genreIds'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof TVShowSearchResultRecord
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TVShowSearchResultRecord
     */
    'originCountry'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof TVShowSearchResultRecord
     */
    'originalLanguage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TVShowSearchResultRecord
     */
    'originalName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TVShowSearchResultRecord
     */
    'overview'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TVShowSearchResultRecord
     */
    'popularity'?: number;
    /**
     * 
     * @type {string}
     * @memberof TVShowSearchResultRecord
     */
    'posterPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TVShowSearchResultRecord
     */
    'firstAirDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TVShowSearchResultRecord
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TVShowSearchResultRecord
     */
    'voteAverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof TVShowSearchResultRecord
     */
    'voteCount'?: number;
}
/**
 * 
 * @export
 * @interface TVShowSearchResults
 */
export interface TVShowSearchResults {
    /**
     * 
     * @type {number}
     * @memberof TVShowSearchResults
     */
    'page'?: number;
    /**
     * 
     * @type {Array<TVShowSearchResultRecord>}
     * @memberof TVShowSearchResults
     */
    'results'?: Array<TVShowSearchResultRecord> | null;
    /**
     * 
     * @type {number}
     * @memberof TVShowSearchResults
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof TVShowSearchResults
     */
    'totalResults'?: number;
}
/**
 * 
 * @export
 * @interface TvEpisode
 */
export interface TvEpisode {
    /**
     * 
     * @type {string}
     * @memberof TvEpisode
     */
    'tvShowTitle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TvEpisode
     */
    'airDate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TvEpisode
     */
    'episodeNumber'?: number;
    /**
     * 
     * @type {Array<GuestStar>}
     * @memberof TvEpisode
     */
    'guestStars'?: Array<GuestStar> | null;
    /**
     * 
     * @type {string}
     * @memberof TvEpisode
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TvEpisode
     */
    'overview'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TvEpisode
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TvEpisode
     */
    'productionCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TvEpisode
     */
    'runtime'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TvEpisode
     */
    'seasonNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof TvEpisode
     */
    'stillPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TvEpisode
     */
    'voteAverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof TvEpisode
     */
    'voteCount'?: number;
}
/**
 * 
 * @export
 * @interface TvSeason
 */
export interface TvSeason {
    /**
     * 
     * @type {string}
     * @memberof TvSeason
     */
    'tvShowTitle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TvSeason
     */
    'airDate'?: string | null;
    /**
     * 
     * @type {Array<EpisodeSummary>}
     * @memberof TvSeason
     */
    'episodes'?: Array<EpisodeSummary> | null;
    /**
     * 
     * @type {string}
     * @memberof TvSeason
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TvSeason
     */
    'overview'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TvSeason
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TvSeason
     */
    'posterPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TvSeason
     */
    'seasonNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof TvSeason
     */
    'voteAverage'?: number;
}
/**
 * 
 * @export
 * @interface TvShowModel
 */
export interface TvShowModel {
    /**
     * 
     * @type {boolean}
     * @memberof TvShowModel
     */
    'adult'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'backdropPath'?: string | null;
    /**
     * 
     * @type {Array<CreatedBy>}
     * @memberof TvShowModel
     */
    'createdBy'?: Array<CreatedBy> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof TvShowModel
     */
    'episodeRunTime'?: Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'firstAirDate'?: string | null;
    /**
     * 
     * @type {Array<Genre>}
     * @memberof TvShowModel
     */
    'genres'?: Array<Genre> | null;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'homepage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TvShowModel
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TvShowModel
     */
    'inProduction'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof TvShowModel
     */
    'languages'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'lastAirDate'?: string | null;
    /**
     * 
     * @type {LastEpisodeToAir}
     * @memberof TvShowModel
     */
    'lastEpisodeToAir'?: LastEpisodeToAir;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof TvShowModel
     */
    'nextEpisodeToAir'?: any | null;
    /**
     * 
     * @type {Array<Network>}
     * @memberof TvShowModel
     */
    'networks'?: Array<Network> | null;
    /**
     * 
     * @type {number}
     * @memberof TvShowModel
     */
    'numberOfEpisodes'?: number;
    /**
     * 
     * @type {number}
     * @memberof TvShowModel
     */
    'numberOfSeasons'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TvShowModel
     */
    'originCountry'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'originalLanguage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'originalName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'overview'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TvShowModel
     */
    'popularity'?: number;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'posterPath'?: string | null;
    /**
     * 
     * @type {Array<ProductionCompany>}
     * @memberof TvShowModel
     */
    'productionCompanies'?: Array<ProductionCompany> | null;
    /**
     * 
     * @type {Array<ProductionCountry>}
     * @memberof TvShowModel
     */
    'productionCountries'?: Array<ProductionCountry> | null;
    /**
     * 
     * @type {Array<Season>}
     * @memberof TvShowModel
     */
    'seasons'?: Array<Season> | null;
    /**
     * 
     * @type {Array<SpokenLanguage>}
     * @memberof TvShowModel
     */
    'spokenLanguages'?: Array<SpokenLanguage> | null;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'tagline'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TvShowModel
     */
    'type'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TvShowModel
     */
    'voteAverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof TvShowModel
     */
    'voteCount'?: number;
    /**
     * 
     * @type {CastAndCrewModel}
     * @memberof TvShowModel
     */
    'castAndCrew'?: CastAndCrewModel;
    /**
     * 
     * @type {WatchProviders}
     * @memberof TvShowModel
     */
    'watchProviders'?: WatchProviders;
    /**
     * 
     * @type {VideoResults}
     * @memberof TvShowModel
     */
    'videos'?: VideoResults;
}
/**
 * 
 * @export
 * @interface US
 */
export interface US {
    /**
     * 
     * @type {string}
     * @memberof US
     */
    'link'?: string | null;
    /**
     * 
     * @type {Array<Buy>}
     * @memberof US
     */
    'buy'?: Array<Buy> | null;
    /**
     * 
     * @type {Array<Rent>}
     * @memberof US
     */
    'rent'?: Array<Rent> | null;
    /**
     * 
     * @type {Array<Flatrate>}
     * @memberof US
     */
    'flatrate'?: Array<Flatrate> | null;
    /**
     * 
     * @type {Array<Ad>}
     * @memberof US
     */
    'ads'?: Array<Ad> | null;
}
/**
 * 
 * @export
 * @interface Video
 */
export interface Video {
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'iso6391'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'iso31661'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'key'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'site'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Video
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'type'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Video
     */
    'official'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'publishedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'id'?: string | null;
}
/**
 * 
 * @export
 * @interface VideoResults
 */
export interface VideoResults {
    /**
     * 
     * @type {number}
     * @memberof VideoResults
     */
    'id'?: number;
    /**
     * 
     * @type {Array<Video>}
     * @memberof VideoResults
     */
    'videos'?: Array<Video> | null;
}
/**
 * 
 * @export
 * @interface WatchProviders
 */
export interface WatchProviders {
    /**
     * 
     * @type {number}
     * @memberof WatchProviders
     */
    'id'?: number;
    /**
     * 
     * @type {Results}
     * @memberof WatchProviders
     */
    'results'?: Results;
}

/**
 * ActorApi - axios parameter creator
 * @export
 */
export const ActorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} actorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActorActorIdGet: async (actorId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actorId' is not null or undefined
            assertParamExists('apiActorActorIdGet', 'actorId', actorId)
            const localVarPath = `/api/actor/{actorId}`
                .replace(`{${"actorId"}}`, encodeURIComponent(String(actorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActorPopularGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/actor/popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActorTrendingGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/actor/trending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchActorSearchTextGet: async (searchText: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchText' is not null or undefined
            assertParamExists('apiSearchActorSearchTextGet', 'searchText', searchText)
            const localVarPath = `/api/search/actor/{searchText}`
                .replace(`{${"searchText"}}`, encodeURIComponent(String(searchText)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActorApi - functional programming interface
 * @export
 */
export const ActorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} actorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActorActorIdGet(actorId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActorDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActorActorIdGet(actorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActorApi.apiActorActorIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActorPopularGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActorSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActorPopularGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActorApi.apiActorPopularGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActorTrendingGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActorSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActorTrendingGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActorApi.apiActorTrendingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSearchActorSearchTextGet(searchText: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActorSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSearchActorSearchTextGet(searchText, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActorApi.apiSearchActorSearchTextGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ActorApi - factory interface
 * @export
 */
export const ActorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActorApiFp(configuration)
    return {
        /**
         * 
         * @param {number} actorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActorActorIdGet(actorId: number, options?: RawAxiosRequestConfig): AxiosPromise<ActorDetails> {
            return localVarFp.apiActorActorIdGet(actorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActorPopularGet(options?: RawAxiosRequestConfig): AxiosPromise<ActorSearchResults> {
            return localVarFp.apiActorPopularGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActorTrendingGet(options?: RawAxiosRequestConfig): AxiosPromise<ActorSearchResults> {
            return localVarFp.apiActorTrendingGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchActorSearchTextGet(searchText: string, options?: RawAxiosRequestConfig): AxiosPromise<ActorSearchResults> {
            return localVarFp.apiSearchActorSearchTextGet(searchText, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActorApi - object-oriented interface
 * @export
 * @class ActorApi
 * @extends {BaseAPI}
 */
export class ActorApi extends BaseAPI {
    /**
     * 
     * @param {number} actorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActorApi
     */
    public apiActorActorIdGet(actorId: number, options?: RawAxiosRequestConfig) {
        return ActorApiFp(this.configuration).apiActorActorIdGet(actorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActorApi
     */
    public apiActorPopularGet(options?: RawAxiosRequestConfig) {
        return ActorApiFp(this.configuration).apiActorPopularGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActorApi
     */
    public apiActorTrendingGet(options?: RawAxiosRequestConfig) {
        return ActorApiFp(this.configuration).apiActorTrendingGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} searchText 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActorApi
     */
    public apiSearchActorSearchTextGet(searchText: string, options?: RawAxiosRequestConfig) {
        return ActorApiFp(this.configuration).apiSearchActorSearchTextGet(searchText, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FavoritesApi - axios parameter creator
 * @export
 */
export const FavoritesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [favoriteId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFavoritesDelete: async (favoriteId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (favoriteId !== undefined) {
                localVarQueryParameter['favoriteId'] = favoriteId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFavoritesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FavoriteModel} [favoriteModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFavoritesPost: async (favoriteModel?: FavoriteModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(favoriteModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FavoritesApi - functional programming interface
 * @export
 */
export const FavoritesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FavoritesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [favoriteId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFavoritesDelete(favoriteId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FavoriteModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFavoritesDelete(favoriteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FavoritesApi.apiFavoritesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFavoritesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FavoriteModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFavoritesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FavoritesApi.apiFavoritesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FavoriteModel} [favoriteModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFavoritesPost(favoriteModel?: FavoriteModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FavoriteModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFavoritesPost(favoriteModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FavoritesApi.apiFavoritesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FavoritesApi - factory interface
 * @export
 */
export const FavoritesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FavoritesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [favoriteId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFavoritesDelete(favoriteId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<FavoriteModel>> {
            return localVarFp.apiFavoritesDelete(favoriteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFavoritesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<FavoriteModel>> {
            return localVarFp.apiFavoritesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FavoriteModel} [favoriteModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFavoritesPost(favoriteModel?: FavoriteModel, options?: RawAxiosRequestConfig): AxiosPromise<Array<FavoriteModel>> {
            return localVarFp.apiFavoritesPost(favoriteModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FavoritesApi - object-oriented interface
 * @export
 * @class FavoritesApi
 * @extends {BaseAPI}
 */
export class FavoritesApi extends BaseAPI {
    /**
     * 
     * @param {string} [favoriteId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public apiFavoritesDelete(favoriteId?: string, options?: RawAxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).apiFavoritesDelete(favoriteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public apiFavoritesGet(options?: RawAxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).apiFavoritesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FavoriteModel} [favoriteModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public apiFavoritesPost(favoriteModel?: FavoriteModel, options?: RawAxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).apiFavoritesPost(favoriteModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MovieApi - axios parameter creator
 * @export
 */
export const MovieApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMovieExternalIdGet: async (externalId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalId' is not null or undefined
            assertParamExists('apiMovieExternalIdGet', 'externalId', externalId)
            const localVarPath = `/api/movie/{externalId}`
                .replace(`{${"externalId"}}`, encodeURIComponent(String(externalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMoviePopularGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/movie/popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMovieTrendingGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/movie/trending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchMovieSearchTextGet: async (searchText: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchText' is not null or undefined
            assertParamExists('apiSearchMovieSearchTextGet', 'searchText', searchText)
            const localVarPath = `/api/search/movie/{searchText}`
                .replace(`{${"searchText"}}`, encodeURIComponent(String(searchText)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MovieApi - functional programming interface
 * @export
 */
export const MovieApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MovieApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMovieExternalIdGet(externalId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MovieModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMovieExternalIdGet(externalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovieApi.apiMovieExternalIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMoviePopularGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultsPagedModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMoviePopularGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovieApi.apiMoviePopularGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMovieTrendingGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultsPagedModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMovieTrendingGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovieApi.apiMovieTrendingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSearchMovieSearchTextGet(searchText: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultsPagedModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSearchMovieSearchTextGet(searchText, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovieApi.apiSearchMovieSearchTextGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MovieApi - factory interface
 * @export
 */
export const MovieApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MovieApiFp(configuration)
    return {
        /**
         * 
         * @param {number} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMovieExternalIdGet(externalId: number, options?: RawAxiosRequestConfig): AxiosPromise<MovieModel> {
            return localVarFp.apiMovieExternalIdGet(externalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMoviePopularGet(options?: RawAxiosRequestConfig): AxiosPromise<SearchResultsPagedModel> {
            return localVarFp.apiMoviePopularGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMovieTrendingGet(options?: RawAxiosRequestConfig): AxiosPromise<SearchResultsPagedModel> {
            return localVarFp.apiMovieTrendingGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchMovieSearchTextGet(searchText: string, options?: RawAxiosRequestConfig): AxiosPromise<SearchResultsPagedModel> {
            return localVarFp.apiSearchMovieSearchTextGet(searchText, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MovieApi - object-oriented interface
 * @export
 * @class MovieApi
 * @extends {BaseAPI}
 */
export class MovieApi extends BaseAPI {
    /**
     * 
     * @param {number} externalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieApi
     */
    public apiMovieExternalIdGet(externalId: number, options?: RawAxiosRequestConfig) {
        return MovieApiFp(this.configuration).apiMovieExternalIdGet(externalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieApi
     */
    public apiMoviePopularGet(options?: RawAxiosRequestConfig) {
        return MovieApiFp(this.configuration).apiMoviePopularGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieApi
     */
    public apiMovieTrendingGet(options?: RawAxiosRequestConfig) {
        return MovieApiFp(this.configuration).apiMovieTrendingGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} searchText 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieApi
     */
    public apiSearchMovieSearchTextGet(searchText: string, options?: RawAxiosRequestConfig) {
        return MovieApiFp(this.configuration).apiSearchMovieSearchTextGet(searchText, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchSearchTextGet: async (searchText: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchText' is not null or undefined
            assertParamExists('apiSearchSearchTextGet', 'searchText', searchText)
            const localVarPath = `/api/search/{searchText}`
                .replace(`{${"searchText"}}`, encodeURIComponent(String(searchText)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSearchSearchTextGet(searchText: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultiSearchPagedResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSearchSearchTextGet(searchText, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SearchApi.apiSearchSearchTextGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchSearchTextGet(searchText: string, options?: RawAxiosRequestConfig): AxiosPromise<MultiSearchPagedResults> {
            return localVarFp.apiSearchSearchTextGet(searchText, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @param {string} searchText 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public apiSearchSearchTextGet(searchText: string, options?: RawAxiosRequestConfig) {
        return SearchApiFp(this.configuration).apiSearchSearchTextGet(searchText, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TvShowApi - axios parameter creator
 * @export
 */
export const TvShowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchTvshowSearchTextGet: async (searchText: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchText' is not null or undefined
            assertParamExists('apiSearchTvshowSearchTextGet', 'searchText', searchText)
            const localVarPath = `/api/search/tvshow/{searchText}`
                .replace(`{${"searchText"}}`, encodeURIComponent(String(searchText)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTvshowExternalIdGet: async (externalId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalId' is not null or undefined
            assertParamExists('apiTvshowExternalIdGet', 'externalId', externalId)
            const localVarPath = `/api/tvshow/{externalId}`
                .replace(`{${"externalId"}}`, encodeURIComponent(String(externalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTvshowPopularGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tvshow/popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} seriesId 
         * @param {number} seasonNumber 
         * @param {number} episodeNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTvshowSeriesIdSeasonsSeasonNumberEpisodeEpisodeNumberGet: async (seriesId: number, seasonNumber: number, episodeNumber: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('apiTvshowSeriesIdSeasonsSeasonNumberEpisodeEpisodeNumberGet', 'seriesId', seriesId)
            // verify required parameter 'seasonNumber' is not null or undefined
            assertParamExists('apiTvshowSeriesIdSeasonsSeasonNumberEpisodeEpisodeNumberGet', 'seasonNumber', seasonNumber)
            // verify required parameter 'episodeNumber' is not null or undefined
            assertParamExists('apiTvshowSeriesIdSeasonsSeasonNumberEpisodeEpisodeNumberGet', 'episodeNumber', episodeNumber)
            const localVarPath = `/api/tvshow/{seriesId}/seasons/{seasonNumber}/episode/{episodeNumber}`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)))
                .replace(`{${"seasonNumber"}}`, encodeURIComponent(String(seasonNumber)))
                .replace(`{${"episodeNumber"}}`, encodeURIComponent(String(episodeNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} seriesId 
         * @param {number} seasonNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTvshowSeriesIdSeasonsSeasonNumberGet: async (seriesId: number, seasonNumber: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('apiTvshowSeriesIdSeasonsSeasonNumberGet', 'seriesId', seriesId)
            // verify required parameter 'seasonNumber' is not null or undefined
            assertParamExists('apiTvshowSeriesIdSeasonsSeasonNumberGet', 'seasonNumber', seasonNumber)
            const localVarPath = `/api/tvshow/{seriesId}/seasons/{seasonNumber}`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)))
                .replace(`{${"seasonNumber"}}`, encodeURIComponent(String(seasonNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTvshowTrendingGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tvshow/trending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TvShowApi - functional programming interface
 * @export
 */
export const TvShowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TvShowApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSearchTvshowSearchTextGet(searchText: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TVShowSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSearchTvshowSearchTextGet(searchText, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TvShowApi.apiSearchTvshowSearchTextGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTvshowExternalIdGet(externalId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TvShowModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTvshowExternalIdGet(externalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TvShowApi.apiTvshowExternalIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTvshowPopularGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TVShowSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTvshowPopularGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TvShowApi.apiTvshowPopularGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} seriesId 
         * @param {number} seasonNumber 
         * @param {number} episodeNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTvshowSeriesIdSeasonsSeasonNumberEpisodeEpisodeNumberGet(seriesId: number, seasonNumber: number, episodeNumber: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TvEpisode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTvshowSeriesIdSeasonsSeasonNumberEpisodeEpisodeNumberGet(seriesId, seasonNumber, episodeNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TvShowApi.apiTvshowSeriesIdSeasonsSeasonNumberEpisodeEpisodeNumberGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} seriesId 
         * @param {number} seasonNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTvshowSeriesIdSeasonsSeasonNumberGet(seriesId: number, seasonNumber: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TvSeason>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTvshowSeriesIdSeasonsSeasonNumberGet(seriesId, seasonNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TvShowApi.apiTvshowSeriesIdSeasonsSeasonNumberGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTvshowTrendingGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TVShowSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTvshowTrendingGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TvShowApi.apiTvshowTrendingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TvShowApi - factory interface
 * @export
 */
export const TvShowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TvShowApiFp(configuration)
    return {
        /**
         * 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchTvshowSearchTextGet(searchText: string, options?: RawAxiosRequestConfig): AxiosPromise<TVShowSearchResults> {
            return localVarFp.apiSearchTvshowSearchTextGet(searchText, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTvshowExternalIdGet(externalId: number, options?: RawAxiosRequestConfig): AxiosPromise<TvShowModel> {
            return localVarFp.apiTvshowExternalIdGet(externalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTvshowPopularGet(options?: RawAxiosRequestConfig): AxiosPromise<TVShowSearchResults> {
            return localVarFp.apiTvshowPopularGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} seriesId 
         * @param {number} seasonNumber 
         * @param {number} episodeNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTvshowSeriesIdSeasonsSeasonNumberEpisodeEpisodeNumberGet(seriesId: number, seasonNumber: number, episodeNumber: number, options?: RawAxiosRequestConfig): AxiosPromise<TvEpisode> {
            return localVarFp.apiTvshowSeriesIdSeasonsSeasonNumberEpisodeEpisodeNumberGet(seriesId, seasonNumber, episodeNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} seriesId 
         * @param {number} seasonNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTvshowSeriesIdSeasonsSeasonNumberGet(seriesId: number, seasonNumber: number, options?: RawAxiosRequestConfig): AxiosPromise<TvSeason> {
            return localVarFp.apiTvshowSeriesIdSeasonsSeasonNumberGet(seriesId, seasonNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTvshowTrendingGet(options?: RawAxiosRequestConfig): AxiosPromise<TVShowSearchResults> {
            return localVarFp.apiTvshowTrendingGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TvShowApi - object-oriented interface
 * @export
 * @class TvShowApi
 * @extends {BaseAPI}
 */
export class TvShowApi extends BaseAPI {
    /**
     * 
     * @param {string} searchText 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TvShowApi
     */
    public apiSearchTvshowSearchTextGet(searchText: string, options?: RawAxiosRequestConfig) {
        return TvShowApiFp(this.configuration).apiSearchTvshowSearchTextGet(searchText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} externalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TvShowApi
     */
    public apiTvshowExternalIdGet(externalId: number, options?: RawAxiosRequestConfig) {
        return TvShowApiFp(this.configuration).apiTvshowExternalIdGet(externalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TvShowApi
     */
    public apiTvshowPopularGet(options?: RawAxiosRequestConfig) {
        return TvShowApiFp(this.configuration).apiTvshowPopularGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} seriesId 
     * @param {number} seasonNumber 
     * @param {number} episodeNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TvShowApi
     */
    public apiTvshowSeriesIdSeasonsSeasonNumberEpisodeEpisodeNumberGet(seriesId: number, seasonNumber: number, episodeNumber: number, options?: RawAxiosRequestConfig) {
        return TvShowApiFp(this.configuration).apiTvshowSeriesIdSeasonsSeasonNumberEpisodeEpisodeNumberGet(seriesId, seasonNumber, episodeNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} seriesId 
     * @param {number} seasonNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TvShowApi
     */
    public apiTvshowSeriesIdSeasonsSeasonNumberGet(seriesId: number, seasonNumber: number, options?: RawAxiosRequestConfig) {
        return TvShowApiFp(this.configuration).apiTvshowSeriesIdSeasonsSeasonNumberGet(seriesId, seasonNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TvShowApi
     */
    public apiTvshowTrendingGet(options?: RawAxiosRequestConfig) {
        return TvShowApiFp(this.configuration).apiTvshowTrendingGet(options).then((request) => request(this.axios, this.basePath));
    }
}



